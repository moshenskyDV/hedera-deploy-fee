const { Client, ContractCreateFlow, PrivateKey, AccountBalanceQuery, ContractFunctionParameters } = require("@hashgraph/sdk");
const { ethers, ContractFactory } = require('ethers');
require("dotenv").config();

const main = async () => {
    const myAccountId = process.env.MY_ACCOUNT_ID;
    const myPrivateKey = process.env.MY_PRIVATE_KEY;

    if (!myAccountId || !myPrivateKey) {
        throw new Error("Environment variables MY_ACCOUNT_ID and MY_PRIVATE_KEY must be present");
    }

    const client = Client.forTestnet();
    client.setOperator(myAccountId, myPrivateKey);

    const accountBalanceBeforeSDK = await new AccountBalanceQuery()
        .setAccountId(myAccountId)
        .execute(client);

    // to try on small size comment line 21 and uncomment 22
    const bytecode = "0x60c06040523480156200001157600080fd5b50604051620015cc380380620015cc833981016040819052620000349162000104565b6200003f336200009b565b6001600160a01b0394851660a0529284166080526000805460ff909316600160a01b0260ff60a01b1990931692909217909155600180549184166001600160a01b03199283161790556002805492909316911617905562000189565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200010157600080fd5b50565b600080600080600060a086880312156200011d57600080fd5b85516200012a81620000eb565b60208701519095506200013d81620000eb565b604087015190945060ff811681146200015557600080fd5b60608701519093506200016881620000eb565b60808701519092506200017b81620000eb565b809150509295509295909350565b60805160a0516113d0620001fc600039600081816101b601526102ec01526000818161020a015281816103f70152818161050001528181610558015281816105e20152818161063a015281816106b701528181610770015281816107c50152818161084f01526108a401526113d06000f3fe6080604052600436106100a95760003560e01c8063dc3ef68511610063578063f25f4b561161004b578063f25f4b56146101a4578063f2fde38b146101d8578063f887ea40146101f857005b8063dc3ef68514610151578063e5d128551461018457005b80638da5cb5b116100915780638da5cb5b146100da578063a691744214610111578063be7dd9821461013157005b8063715018a6146100b257806377e38966146100c757005b366100b057005b005b3480156100be57600080fd5b506100b061022c565b6100b06100d5366004611028565b610240565b3480156100e657600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011d57600080fd5b506002546100f4906001600160a01b031681565b34801561013d57600080fd5b506100b061014c3660046110a3565b61095e565b34801561015d57600080fd5b5060005461017290600160a01b900460ff1681565b60405160ff9091168152602001610108565b34801561019057600080fd5b506001546100f4906001600160a01b031681565b3480156101b057600080fd5b506100f47f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e457600080fd5b506100b06101f33660046110cd565b6109a1565b34801561020457600080fd5b506100f47f000000000000000000000000000000000000000000000000000000000000000081565b610234610a31565b61023e6000610a8b565b565b846001600160a01b0316866001600160a01b0316036102a65760405162461bcd60e51b815260206004820152601b60248201527f457461537761703a20544f4b454e5f504149525f494e56414c4944000000000060448201526064015b60405180910390fd5b600080546103e890600160a01b900460ff166001600160a01b038916156102cd57866102cf565b345b6102d99190611100565b6102e3919061111d565b905061031087827f0000000000000000000000000000000000000000000000000000000000000000610af3565b6040805160028082526060820183526000926020830190803683370190505090506001600160a01b038816156103465787610353565b6001546001600160a01b03165b8160008151811061036657610366611155565b6001600160a01b0392831660209182029290920101528716156103895786610396565b6001546001600160a01b03165b816001815181106103a9576103a9611155565b6001600160a01b03928316602091820292909201015260009083908a16156103d157876103d3565b345b6103dd919061116b565b90508315610677576001600160a01b0389166104ec5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fb3bdb41838986308b6040518663ffffffff1660e01b815260040161044894939291906111c2565b60006040518083038185885af1158015610466573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261048f91908101906111f7565b90506104b689826001815181106104a8576104a8611155565b60200260200101518d610af3565b6104e68a826000815181106104cd576104cd611155565b6020026020010151846104e0919061116b565b8d610af3565b50610952565b6001600160a01b0388166105dc57610525897f000000000000000000000000000000000000000000000000000000000000000083610be3565b6040517f4a25d94a0000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634a25d94a90610595908a908690889030908d906004016112b5565b6000604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048f91908101906111f7565b610607897f000000000000000000000000000000000000000000000000000000000000000083610be3565b6040517f8803dbee0000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638803dbee90610595908a908690889030908d906004016112b5565b60006001600160a01b038a1661075c576040517f7ff36ab50000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637ff36ab59084906106f4908b90889030908d906004016111c2565b60006040518083038185885af1158015610712573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261073b91908101906111f7565b60018151811061074d5761074d611155565b60200260200101519050610945565b6001600160a01b038916610849576107958a7f000000000000000000000000000000000000000000000000000000000000000084610be3565b6040517f18cbafe50000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906318cbafe5906108029085908b90889030908d906004016112b5565b6000604051808303816000875af1158015610821573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261073b91908101906111f7565b6108748a7f000000000000000000000000000000000000000000000000000000000000000084610be3565b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906108e19085908b90889030908d906004016112b5565b6000604051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092891908101906111f7565b60018151811061093a5761093a611155565b602002602001015190505b61095089828d610af3565b505b50505050505050505050565b610966610a31565b6000805460ff909216600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6109a9610a31565b6001600160a01b038116610a255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161029d565b610a2e81610a8b565b50565b6000546001600160a01b0316331461023e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029d565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8115610bde576001600160a01b038316610bca57604080516000808252602082019092526001600160a01b038316908490604051610b319190611315565b60006040518083038185875af1925050503d8060008114610b6e576040519150601f19603f3d011682016040523d82523d6000602084013e610b73565b606091505b5050905080610bc45760405162461bcd60e51b815260206004820152601d60248201527f457461537761703a20484241525f5452414e534645525f4641494c4544000000604482015260640161029d565b50505050565b610bde6001600160a01b0384168284610d0d565b505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190611331565b905081811015610bc4576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d06919061134a565b5050505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610bde92869291600091610dcb918516908490610e5e565b9050805160001480610dec575080806020019051810190610dec919061134a565b610bde5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161029d565b6060610e6d8484600085610e75565b949350505050565b606082471015610eed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161029d565b600080866001600160a01b03168587604051610f099190611315565b60006040518083038185875af1925050503d8060008114610f46576040519150601f19603f3d011682016040523d82523d6000602084013e610f4b565b606091505b5091509150610f5c87838387610f67565b979650505050505050565b60608315610fd6578251600003610fcf576001600160a01b0385163b610fcf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029d565b5081610e6d565b610e6d8383815115610feb5781518083602001fd5b8060405162461bcd60e51b815260040161029d9190611367565b6001600160a01b0381168114610a2e57600080fd5b8015158114610a2e57600080fd5b600080600080600080600060e0888a03121561104357600080fd5b873561104e81611005565b9650602088013561105e81611005565b9550604088013561106e81611005565b9450606088013593506080880135925060a0880135915060c08801356110938161101a565b8091505092959891949750929550565b6000602082840312156110b557600080fd5b813560ff811681146110c657600080fd5b9392505050565b6000602082840312156110df57600080fd5b81356110c681611005565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611117576111176110ea565b92915050565b60008261113a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81810381811115611117576111176110ea565b600081518084526020808501945080840160005b838110156111b75781516001600160a01b031687529582019590820190600101611192565b509495945050505050565b8481526080602082015260006111db608083018661117e565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561120a57600080fd5b825167ffffffffffffffff8082111561122257600080fd5b818501915085601f83011261123657600080fd5b8151818111156112485761124861113f565b8060051b604051601f19603f8301168101818110858211171561126d5761126d61113f565b60405291825284820192508381018501918883111561128b57600080fd5b938501935b828510156112a957845184529385019392850192611290565b98975050505050505050565b85815284602082015260a0604082015260006112d460a083018661117e565b6001600160a01b0394909416606083015250608001529392505050565b60005b8381101561130c5781810151838201526020016112f4565b50506000910152565b600082516113278184602087016112f1565b9190910192915050565b60006020828403121561134357600080fd5b5051919050565b60006020828403121561135c57600080fd5b81516110c68161101a565b60208152600082518060208401526113868160408501602087016112f1565b601f01601f1916919091016040019291505056fea2646970667358221220ab71e9aa08a848032c814b430820a3398f66e04a04697a7a71f8ddf4cea6fda364736f6c63430008130033";
    // const bytecode = '0x60806080';

    const contractCreate = new ContractCreateFlow()
        .setGas(100000)
        .setConstructorParameters(
            new ContractFunctionParameters()
                .addAddress(ethers.constants.AddressZero)
                .addAddress(ethers.constants.AddressZero)
                .addUint256(5)
                .addAddress(ethers.constants.AddressZero)
                .addAddress(ethers.constants.AddressZero)
        )
        .setBytecode(bytecode);
    const contractCreateSign = await contractCreate.sign(PrivateKey.fromStringECDSA(myPrivateKey));
    const txResponse = await contractCreateSign.execute(client);
    const { contractId } = await txResponse.getReceipt(client);
    console.log(`The new contract ID (SDK) is 0x${contractId.toSolidityAddress()}`);


    const accountBalanceAfterSDK = await new AccountBalanceQuery()
        .setAccountId(myAccountId)
        .execute(client);

    console.log('Deployment through SDK way costs: ' + accountBalanceBeforeSDK.hbars.toBigNumber().minus(accountBalanceAfterSDK.hbars.toBigNumber()).toString() + ' hbars');

    const provider = new ethers.providers.JsonRpcProvider('https://testnet.hashio.io/api');
    const signer = new ethers.Wallet(process.env.MY_PRIVATE_KEY_HEX, provider);

    const accountBalanceBeforeEthers = await new AccountBalanceQuery()
        .setAccountId(myAccountId)
        .execute(client);

    const abi = [{"inputs":[{"internalType":"address payable","name":"_feeWallet","type":"address"},{"internalType":"contract IUniswapV2Router02","name":"_router","type":"address"},{"internalType":"uint8","name":"_feePromille","type":"uint8"},{"internalType":"contract IERC20","name":"_whbarToken","type":"address"},{"internalType":"contract IWHBAR","name":"_whbarContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"}];
    const factory = new ContractFactory(abi, bytecode, signer);

    const contract = await factory.deploy(
        ethers.constants.AddressZero,
        ethers.constants.AddressZero,
        5,
        ethers.constants.AddressZero,
        ethers.constants.AddressZero,
        { gasLimit: 105000 },
    );
    const oracleAddress = (await contract.deployTransaction.wait()).contractAddress;
    console.log(`The new contract ID (ethers) is: ${oracleAddress}`);


    const accountBalanceAfterEthers = await new AccountBalanceQuery()
        .setAccountId(myAccountId)
        .execute(client);

    console.log('Deployment through Ethers way costs: ' + accountBalanceBeforeEthers.hbars.toBigNumber().minus(accountBalanceAfterEthers.hbars.toBigNumber()).toString() + ' hbars');

}
main();
